# grb prompt theme
#
# copied from wunjo prompt theme and modified
# copied from Gary Bernhardt (grb) theme and modified

autoload -U zgitinit
zgitinit

prompt_grb_help () {
  cat <<'EOF'

  prompt grb

EOF
}

revstring() {
  git describe --always $1 2>/dev/null ||
  git rev-parse --short $1 2>/dev/null
}

coloratom() {
  local off=$1 atom=$2
  if [[ $atom[1] == [[:upper:]] ]]; then
    off=$(( $off + 60 ))
  fi
  echo $(( $off + $colorcode[${(L)atom}] ))
}
colorword() {
  local fg=$1 bg=$2 att=$3
  local -a s

  if [ -n "$fg" ]; then
    s+=$(coloratom 30 $fg)
  fi
  if [ -n "$bg" ]; then
    s+=$(coloratom 40 $bg)
  fi
  if [ -n "$att" ]; then
    s+=$attcode[$att]
  fi

  echo "%{"$'\e['${(j:;:)s}m"%}"
}

function minutes_since_last_commit {
    now=`date +%s`
    last_commit=`git log --pretty=format:'%at' -1 2>/dev/null`
    if $lastcommit ; then
      seconds_since_last_commit=$((now-last_commit))
      minutes_since_last_commit=$((seconds_since_last_commit/60))
      echo $minutes_since_last_commit
    else
      echo "-1"
    fi
}

function prompt_grb_scm_time_since_commit() {
  local -A pc
  pc=(${(kv)wunjo_prompt_colors})

  if zgit_inworktree; then
        local MINUTES_SINCE_LAST_COMMIT=`minutes_since_last_commit`
        if [ "$MINUTES_SINCE_LAST_COMMIT" -eq -1 ]; then
          COLOR="$pc[scm_time_uncommitted]"
          local SINCE_LAST_COMMIT="${COLOR}new$pc[reset]"  
        else
          if [ "$MINUTES_SINCE_LAST_COMMIT" -gt 30 ]; then
            COLOR="$pc[scm_time_long]"
          elif [ "$MINUTES_SINCE_LAST_COMMIT" -gt 10 ]; then
            COLOR="$pc[scm_time_medium]"
          else
            COLOR="$pc[scm_time_short]"
          fi
          local SINCE_LAST_COMMIT="${COLOR}$(minutes_since_last_commit)m$pc[reset]"
        fi
        echo $SINCE_LAST_COMMIT
    fi
}

function prompt_grb_scm_info() {
    if zgit_inworktree; then
      echo "($(prompt_grb_scm_time_since_commit)|$(prompt_wunjo_scm_branch))"
    fi
}

prompt_grb_setup() {
  local verbose
  if [[ $TERM == screen* ]] && [ -n "$STY" ]; then
    verbose=
  else
    verbose=1
  fi

  typeset -A colorcode
  colorcode[black]=0
  colorcode[red]=1
  colorcode[green]=2
  colorcode[yellow]=3
  colorcode[blue]=4
  colorcode[magenta]=5
  colorcode[cyan]=6
  colorcode[white]=7
  colorcode[default]=9
  colorcode[k]=$colorcode[black]
  colorcode[r]=$colorcode[red]
  colorcode[g]=$colorcode[green]
  colorcode[y]=$colorcode[yellow]
  colorcode[b]=$colorcode[blue]
  colorcode[m]=$colorcode[magenta]
  colorcode[c]=$colorcode[cyan]
  colorcode[w]=$colorcode[white]
  colorcode[.]=$colorcode[default]

  typeset -A attcode
  attcode[none]=00
  attcode[bold]=01
  attcode[faint]=02
  attcode[standout]=03
  attcode[underline]=04
  attcode[blink]=05
  attcode[reverse]=07
  attcode[conceal]=08
  attcode[normal]=22
  attcode[no-standout]=23
  attcode[no-underline]=24
  attcode[no-blink]=25
  attcode[no-reverse]=27
  attcode[no-conceal]=28

  local -A pc
  pc[default]='default'
  pc[date]='cyan'
  pc[time]='Blue'
  pc[host]='Green'
  pc[user]='cyan'
  pc[punc]='yellow'
  pc[line]='magenta'
  pc[hist]='green'
  pc[path]='Cyan'
  pc[shortpath]='default'
  pc[rc]='red'
  pc[scm_branch]='Cyan'
  pc[scm_commitid]='Yellow'
  pc[scm_status_dirty]='Red'
  pc[scm_status_staged]='Green'
  pc[scm_time_short]='green'
  pc[scm_time_medium]='yellow'
  pc[scm_time_long]='red'
  pc[scm_time_uncommitted]='Magenta'
  pc[#]='Yellow'
  for cn in ${(k)pc}; do
    pc[${cn}]=$(colorword $pc[$cn])
  done
  pc[reset]=$(colorword . . 00)

  typeset -Ag wunjo_prompt_colors
  wunjo_prompt_colors=(${(kv)pc})

  local p_date
  p_date="$pc[date]%D{%Y-%m-%d} $pc[time]%D{%T}$pc[reset]"


  PROMPT=
  if [ $verbose ]; then
    PROMPT+="$pc[host]%m$pc[reset]"
  fi
  PROMPT+=":$pc[shortpath]%1~$pc[reset]"
    PROMPT+="\$(prompt_grb_scm_info)"
  PROMPT+=" $pc[#]\$$pc[reset] "

    RPROMPT=
    if [ $verbose ]; then
    RPROMPT+="$p_date "
    fi

  export PROMPT RPROMPT
}

prompt_wunjo_scm_branch() {
  zgit_isgit || return
  local -A pc
  pc=(${(kv)wunjo_prompt_colors})

  echo -n "$pc[punc]$pc[scm_branch]$(zgit_head)"

  if zgit_inworktree; then
    if ! zgit_isindexclean; then
      echo -n "$pc[scm_status_staged]+"
    fi

    local -a dirty
    if ! zgit_isworktreeclean; then
      dirty+='!'
    fi

    if zgit_hasunmerged; then
      dirty+='*'
    fi

    if zgit_hasuntracked; then
      dirty+='?'
    fi

    if [ $#dirty -gt 0 ]; then
      echo -n "$pc[scm_status_dirty]${(j::)dirty}"
    fi
  fi

  echo $pc[reset]
}

prompt_grb_setup "$@"

# vim:set ft=zsh:
